{"version":3,"sources":["nav.js","forms/checkAllBoxes.js","forms/customer.js","forms/data-list.js","forms/discounts.js","forms/input_date.js","forms/invoice.js","forms/payment_methods.js","forms/picture.js","forms/preview_image.js","forms/product.js","forms/project.js","forms/search.js","forms/shipping_companies.js","forms/taxes.js","forms/time-tracking.js","security/renew-token.js"],"names":[],"mappingsrrWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACprFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.min.js","sourcesContent":["const currentPath = window.location.pathname;\n\ndocument.addEventListener('DOMContentLoaded', function() {\n\n    const links = document.querySelectorAll('.sidebar ul a');\n\n    // Function to check if the current path is part of the link's path\n    const isLinkActive = (link, currentPath) => {\n      const href = link.getAttribute('href');\n      return currentPath.startsWith(href);\n    };\n    \n    // adds active to the path we're in\n    links.forEach(link => {\n      const href = link.getAttribute('href');\n\n      // adds active to the main pages and their children\n      if (isLinkActive(link, currentPath) && href !== '/') {\n        link.classList.add('active');\n      }\n      \n      // adds active to the settings pages\n      if (isLinkActive(link, currentPath) && href !== '/') {\n        if(link.getAttribute('href').split('/')[1] == 'settings') {\n            const settings_link = document.querySelector('.sidebar ul a[href*=\"/settings/account\"]')\n            settings_link.classList.add('active');\n        }\n      }\n    });\n    \n    \n    \n\n    // const currentPath = window.location.pathname;\n    // If the path starts with settings then collapse the main sidebar\n    if(currentPath.split('/')[1] == 'settings') {\n        const logo = document.querySelector('.sidebar .logo');\n        const nav_texts = document.querySelectorAll('.sidebar-main p');\n        const sidebar = document.querySelector('.sidebar-main');\n        const nav_list_items = document.querySelectorAll('.sidebar-main li');\n        const settings_sidebar = document.querySelector('.settings-sidebar');\n        const header = document.querySelector('.settings-sidebar + header');\n        const settings_wrapper = document.querySelector('.settings-wrapper');\n        if(currentPath == '/settings/') {\n            logo.style.transition = 'height 1s ease-in-out, opacity 1s ease-in-out';\n            nav_texts.forEach(nav_text => {\n                nav_text.style.transition = 'opacity 1s ease-in-out';\n            });\n            sidebar.style.transition = 'width 1s ease-in-out, padding-top 1s ease-in-out';\n            nav_list_items.forEach(nav_list_item => {\n                nav_list_item.style.transition = 'padding 1s ease-in-out, margin-bottom 1s ease-in-out';\n            });\n            settings_sidebar.style.transition = 'margin-left 1s ease-in-out';\n            header.style.transition = 'margin-left 1s ease-in-out';\n            settings_wrapper.style.transition = 'margin-left 1s ease-in-out';\n        }\n        var timeout;\n        if (currentPath.split('/')[2]) {\n            timeout = 0;\n            side_bar_styling(timeout, logo, nav_texts, sidebar, nav_list_items, settings_sidebar, header, settings_wrapper);\n        } else {\n            timeout = 500;\n            side_bar_styling(timeout, logo, nav_texts, sidebar, nav_list_items, settings_sidebar, header, settings_wrapper);\n        }\n    }\n    \n    function side_bar_styling(timeout, logo, nav_texts, sidebar, nav_list_items, settings_sidebar, header, settings_wrapper) {\n        setTimeout(() => {\n            logo.style.opacity = '0';\n            setTimeout(() => {\n                logo.style.height = '0';                \n            }, timeout);\n            logo.style.overflow = 'hidden';\n            nav_texts.forEach(nav_text => {\n                nav_text.style.opacity = '0';\n                nav_text.style.overflow = 'hidden';\n            });\n            sidebar.style.width = '80px'\n            sidebar.style.paddingTop = '0';\n            nav_list_items.forEach(nav_list_item => {\n                nav_list_item.style.paddingLeft = '10px';\n                nav_list_item.style.paddingRight = '10px';\n                nav_list_item.style.paddingTop = '10px';\n                nav_list_item.style.paddingBottom = '10px';\n                nav_list_item.style.marginBottom = '0';\n            })\n            settings_sidebar.style.marginLeft = '100px';\n            header.style.marginLeft = 30+220+10+100+'px';\n            settings_wrapper.style.marginLeft = 30+220+10+100+'px';\n        }, timeout);\n    }\n\n\n    // Find loader\n    const loader = document.querySelector('.loader-container');\n    if(loader) {\n        setTimeout(() => {\n            loader.style.display = 'none';        \n        }, 250);\n    }\n\n});","function checkAllBoxes(input) {\n    // Select all checkboxes with the class 'box-checkbox'\n    const checkboxes = document.querySelectorAll('.box-checkbox');\n\n    // Loop through each checkbox and set its 'checked' property\n    checkboxes.forEach((checkbox) => {\n        checkbox.checked = input.checked;\n    });\n}","function shippingCheckBoxChange(checkbox) {\n    const shippingDetailsSection = document.querySelector('.shipping_details');\n\n    if (checkbox.checked) {\n        // If \"Same as shipping information\" is checked\n        shippingDetailsSection.classList.add('hidden');\n    } else {\n        // If \"Same as shipping information\" is unchecked\n        shippingDetailsSection.classList.remove('hidden');\n    }\n}\n\n\nfunction deleteSelectedCustomers() {\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.customer-checkbox:checked');\n\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch('/customers/delete-selected', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Customers deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}","var dataLists;\n\nfunction getDataLists() {\n\n    // Get all elements with class \"data-list\"\n    dataLists = document.querySelectorAll('.data-list');\n    // Iterate over each data list\n    dataLists.forEach(dataList => {\n        createDataList(dataList);\n    });\n\n}\n\ngetDataLists();\n\nfunction createDataList(dataList) {\n    // Find the associated input element within the current data list\n    const input = dataList.querySelector('.data-list-input');\n    const datalist = dataList.querySelector('.data-list-datalist');\n\n    if (!input || !datalist) {\n        console.error('Input or datalist element not found for data list.');\n        return;\n    }\n\n    // Click event listener to hide datalist when clicking outside the input and datalist\n    document.addEventListener('click', function (event) {\n        const isClickInsideInput = input.contains(event.target);\n        const isClickInsideDatalist = datalist.contains(event.target);\n\n\n        if (!isClickInsideInput && !isClickInsideDatalist) {\n            datalist.style.display = 'none';\n            input.style.borderRadius = \"5px\";\n        }\n    });\n\n    // Focus event for the input field\n    input.onfocus = function () {\n        datalist.style.display = 'block';\n        input.style.borderRadius = \"5px 5px 0 0\";\n    };\n\n    clickOptions(input, datalist);\n\n    // Initialize the currentFocus\n    var currentFocus = -1;\n    // Input event for filtering options based on user input\n    input.oninput = function () {\n        // reset the current focus to 0 when input has changed\n        currentFocus = -1;\n        const text = input.value.toUpperCase();\n        const options = datalist.querySelectorAll('option');\n\n        for (let option of options) {\n            if (option.value.toUpperCase().indexOf(text) > -1) {\n                option.style.display = \"block\";\n            } else {\n                option.style.display = \"none\";\n            }\n        }\n    }\n\n    // Keydown event for handling arrow key navigation, Enter key, and Backspace key\n    input.onkeydown = function (e) {\n        if (e.keyCode == 40 || e.keyCode == 38) {\n            // Arrow down or Arrow up key pressed\n            const visibleOptions = getVisibleOptions(datalist);\n            if (e.keyCode == 40) {\n                // Arrow down key pressed\n                currentFocus += 1;\n                if(currentFocus > visibleOptions.length) {\n                    currentFocus = 1;\n                }\n                addActive(visibleOptions, currentFocus);\n            } else if (e.keyCode == 38) {\n                // Arrow up key pressed\n                currentFocus -= 1;\n                if(currentFocus < 1) {\n                    currentFocus = visibleOptions.length;\n                }\n                addActive(visibleOptions, currentFocus);\n            }\n        } else if (e.keyCode == 13) {\n            // Enter key pressed\n            e.preventDefault();\n            const activeOption = datalist.querySelector('.active');\n\n            if (activeOption) {\n                input.value = activeOption.value;\n                datalist.style.display = 'none';\n                input.style.borderRadius = '5px';\n                const selectedOption = datalist.querySelector('.selected');\n                if(selectedOption) {\n                    selectedOption.classList.remove('selected');\n                }\n                activeOption.classList.add('selected');\n                triggerInvoiceChange(activeOption);\n            }\n        } else if (e.keyCode == 8) {\n            // Backspace key pressed\n            removeActive(datalist.querySelectorAll('option'));\n            datalist.style.display = 'block';\n        }\n    };\n}\n\n// Helper function to filter visible options\nfunction getVisibleOptions(datalist) {\n    return Array.from(datalist.querySelectorAll('option')).filter(option => option.style.display !== 'none');\n}\n\n// Helper function to add active class to the currently focused option\nfunction addActive(options, currentFocus) {\n    if (!options || !options.length) return false;\n\n    removeActive(options);\n    currentFocus = (currentFocus + options.length) % options.length;  // Ensure a valid index\n\n    options[currentFocus].classList.add(\"active\");\n}\n\n// Helper function to remove active class from all options\nfunction removeActive(options) {\n    options.forEach(option => option.classList.remove(\"active\"));\n}\n\n// Helper function to get the current focus index\nfunction getCurrentFocus(datalist) {\n    const activeOption = datalist.querySelector('.active');\n    return activeOption ? Array.from(datalist.querySelectorAll('option')).indexOf(activeOption) : -1;\n}\n\n// Trigger the change on the invoice page, this is to change the shipping, vat, discount and total values\nfunction triggerInvoiceChange(option) {\n    const invoicePage = document.querySelector(\".create-invoice\");\n    if(invoicePage) {\n        changeInvoice(option);\n    }\n}\n\nfunction clickOptions(input, datalist) {\n    // Click event for datalist options\n    for (let option of datalist.options) {\n        option.onclick = function () {\n            input.value = option.value;\n            datalist.style.display = 'none';\n            input.style.borderRadius = \"5px\";\n            // Add a selected class to the option selected and remove the previous one if there is any\n            const selectedOption = option.parentNode.querySelector('.selected');\n            if(selectedOption) {\n                selectedOption.classList.remove('selected');\n            }\n            option.classList.add('selected');\n            // Trigger the invoice change\n            triggerInvoiceChange(option);\n        }\n    };\n}","function deleteSelectedDiscounts() {\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.discount-checkbox:checked');\n\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch('/settings/discounts/delete-selected', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Discounts deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}","const paid_on = document.getElementById('paid_on');\nif(paid_on) {\n    // Get the current date in the format YYYY-MM-DD\n    const currentDate = new Date().toISOString().split('T')[0];\n\n    // Set the value of the input element to the current date\n    paid_on.value = currentDate;\n}\n  ","function deleteSelectedInvoices() {\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.invoice-checkbox:checked');\n\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch('/invoices/delete-selected', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Invoices deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}\n\n\n// JavaScript function to clone and append the element\nfunction addElement(container) {\n    // Get the template element within the specified container\n    const template = container.querySelector('.add-el');\n\n    // Clone the template element\n    const clone = template.cloneNode(true);\n\n    // Update the 'for' attribute of the label\n    const label = clone.querySelector('.data-list-label')\n    const labelFor = label.getAttribute('for');\n    const labelNumber = container.querySelectorAll('.add-el').length + 1;\n    label.setAttribute('for', `${labelFor}-${labelNumber}`);\n\n    // Update the 'id' attribute of the input before the datalist\n    const inputBeforeDatalist = clone.querySelector('.data-list-input');\n    const inputIdBeforeDatalist = inputBeforeDatalist.getAttribute('id');\n    inputBeforeDatalist.setAttribute('id', `${inputIdBeforeDatalist}-${labelNumber}`);\n\n    // Update the 'id' attribute of the datalist\n    const datalist = clone.querySelector('.data-list-datalist');\n    const datalistId = datalist.getAttribute('id');\n    datalist.setAttribute('id', `${datalistId}-${labelNumber}`);\n\n    // Clear the input values in the clone\n    const inputs = clone.querySelectorAll('input');\n    inputs.forEach(input => input.value = '');\n\n    // Set the product quantities clone to value 1\n    const product_quantites = clone.querySelector('input[name=\"product_quantities[]\"]');\n    if (product_quantites) {\n        product_quantites.value = '1';\n    }\n\n    // Set the value of the input element with name \"paid_on\" to today\n    const paid_on = clone.querySelector('input[name=\"paid_on[]\"]');\n    if(paid_on) {\n        const today = new Date().toISOString().split('T')[0];\n        paid_on.value = today;\n    } \n    \n    // Append the clone to the container\n    container.querySelector('.add-el-container').appendChild(clone);\n    getDataLists();\n}\n\n\n\nasync function createInvoice() {\n    const invoiceForm = document.querySelector('form[action=\"/invoices/create\"]');\n\n    if (invoiceForm) {\n        const formData = new FormData(invoiceForm);\n        const dataIds = {};\n        var prices = {};\n        const discountAmounts = {}; // Change variable name to discountAmounts\n    \n        // Iterate over inputs with datalist\n        const inputsWithDatalist = invoiceForm.querySelectorAll('.data-list-input');\n        inputsWithDatalist.forEach((input) => {\n            const datalistId = input.getAttribute('data-datalist-id');\n            const datalist = document.querySelector(`#${datalistId}`);\n            const selectedOption = datalist.querySelector(`option[value=\"${input.value}\"]`);\n    \n            // Append data-id, price, amount-total, amount-percentage, and tax-percentage to FormData if an option is selected\n            if (selectedOption) {\n                formData.delete(input.name);\n                const dataId = selectedOption.getAttribute('data-id');\n                const price = selectedOption.getAttribute('data-price');\n                const amountTotal = selectedOption.getAttribute('data-amount-total');\n                const amountPercentage = selectedOption.getAttribute('data-amount-percentage');\n                const taxPercentage = selectedOption.getAttribute('data-percentage'); // Added line\n    \n                // Check the type of input and store data accordingly\n                const inputType = input.name.replace(/\\[\\]$/, ''); // Remove trailing []\n                if (!dataIds[inputType]) {\n                    dataIds[inputType] = [];\n                }\n                dataIds[inputType].push(dataId);\n    \n                if (inputType.includes('product')) {\n                    if (!prices[inputType]) {\n                        prices[inputType] = [];\n                    }\n                    prices[inputType].push(price);\n    \n                    // Set each price individually in the form data\n                    prices[inputType].forEach((productPrice, index) => {\n                        formData.set(`${inputType}_prices[${index}]`, productPrice);\n                    });\n                } else if (inputType.includes('discount')) {\n                    if (!discountAmounts[inputType]) {\n                        discountAmounts[inputType] = { total: [], percentage: [] };\n                    }\n                    discountAmounts[inputType].total.push(amountTotal);\n                    discountAmounts[inputType].percentage.push(amountPercentage);\n    \n                    // Set each amount individually in the form data\n                    discountAmounts[inputType].total.forEach((total, index) => {\n                        formData.set(`${inputType}_amounts_totals[${index}]`, total);\n                    });\n    \n                    // Set each amount percentage individually in the form data\n                    discountAmounts[inputType].percentage.forEach((percentage, index) => {\n                        formData.set(`${inputType}_amounts_percentages[${index}]`, percentage);\n                    });\n                }\n    \n                // Set tax percentage in the form data\n                formData.set(`${inputType}_tax_percentage`, taxPercentage);\n    \n                // Set each dataId individually in the form data\n                dataIds[inputType].forEach((id, index) => {\n                    formData.set(`${inputType}[${index}]`, id);\n                });\n            }\n        });\n\n        // Fetch API POST request\n        try {\n            const response = await fetch('/invoices/create', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams(formData).toString(),\n            });\n\n            if (response.ok) {\n                // Handle success, e.g., redirect to a new page\n                window.location.href = '/invoices?success';\n            } else {\n                // Handle errors\n                console.error('Error:', response.statusText);\n            }\n        } catch (error) {\n            console.error('Error:', error.message);\n        }\n    }\n}\n\n// Attach the createInvoice function to the form submission event\nconst invoiceForm = document.querySelector('form[action=\"/invoices/create\"]');\nif (invoiceForm) {\n    invoiceForm.addEventListener('submit', (event) => {\n        event.preventDefault(); // Prevent the default form submission\n        createInvoice(); // Call the custom function to handle form submission\n    });\n\n    // Set the value of the input element with name \"paid_on\" to today\n    const today = new Date().toISOString().split('T')[0];\n    document.querySelector('input[name=\"paid_on[]\"]').value = today;\n}\n\n\n// Update the invoice totals\nfunction changeInvoice (option) {\n\n    // If the customer option has been selected then we need to search for the projects which match the customer\n    if (option.classList.contains('customer-option')) {\n        // Execute your code here\n        getProjects(option);\n    }\n\n    const selectedOptions = document.querySelectorAll('.selected');\n\n    // Get the product prices\n    const prices = [];\n    selectedOptions.forEach((option) => {\n        const price = option.dataset.price;\n        if (price !== undefined) {\n            prices.push(parseFloat(price)); // Convert to a numeric value if needed\n        }\n    });\n\n    // Get the product quantities\n    const product_quantities_inputs = document.querySelectorAll('.product-quantity');\n    const product_quantities = [];\n    product_quantities_inputs.forEach((quantity) => {\n        if (quantity.value !== undefined) {\n            product_quantities.push(parseFloat(quantity.value));\n        }\n    })\n\n    // Get the product totals\n    const product_totals = [];\n    for (let i = 0; i < prices.length; i++) {\n        const product_total = prices[i] * product_quantities[i];\n        product_totals.push(parseFloat(product_total));\n    }\n\n    // Get the discount percentage\n    const discount_percentages = [];\n    selectedOptions.forEach((option) => {\n        const discount_percentage = option.dataset.amountPercentage;\n        if (discount_percentage !== undefined) {\n            discount_percentages.push(parseFloat(discount_percentage)); // Convert to a numeric value if needed\n        }\n    });\n\n\n    // Get the discount percentage\n    const discount_totals = [];\n    selectedOptions.forEach((option) => {\n        const discount_total = option.dataset.amountTotal;\n        if (discount_total !== undefined) {\n            discount_totals.push(parseFloat(discount_total)); // Convert to a numeric value if needed\n        }\n    });\n\n    // Get the tax percentage\n    const tax_percentage_input = document.querySelector('#tax-datalist .selected')\n    var tax_percentage;\n    if(tax_percentage_input) {\n        tax_percentage = tax_percentage_input.dataset.percentage;\n    }\n\n    // Get the shipping amount\n    var shipping_amount = 0;\n    if(document.querySelector('#shipping_amount').value) {\n        shipping_amount = parseFloat(document.querySelector('#shipping_amount').value);\n    }\n\n    // Get the paid amounts\n    const paid_amounts = [];\n    const paid_amounts_input = document.querySelectorAll('.paid-amount');\n    paid_amounts_input.forEach((amount) => {\n        const paid_amount = amount.value;\n        if (paid_amount !== undefined) {\n            paid_amounts.push(parseFloat(paid_amount));\n        }\n    })\n\n    \n    const product_total = product_totals.reduce((sum, price) => sum + parseFloat(price), 0);;\n    const discount_amounts_total = discount_totals.reduce((sum, total) => sum + parseFloat(total),0);\n    const discount_amounts_percentage = discount_percentages.reduce((sum, percentage) => sum + parseFloat(percentage),0);\n    const discounts_total = (product_total / 100 * discount_amounts_percentage) + discount_amounts_total;\n    const tax_amount = (product_total + shipping_amount) / 100 * parseFloat(tax_percentage);\n    const amount_total = product_total - discounts_total + shipping_amount + tax_amount;\n    const paid_total = paid_amounts.reduce((sum, amount) => sum + (parseFloat(amount) || 0), 0);\n    const amount_due = (paid_total > amount_total) ? 0 : (amount_total - paid_total);\n    \n    if (product_total) {\n        document.querySelector('.total_products').innerHTML = product_total;\n    }\n    if (shipping_amount) {\n        document.querySelector('.total_shipping').innerHTML = shipping_amount;\n    }\n    if (discounts_total) {\n        document.querySelector('.total_discount').innerHTML = discounts_total;\n    }\n    if (tax_amount && tax_percentage) {\n        document.querySelector('.total_vat').innerHTML = tax_amount + \"(\" + tax_percentage + \"%)\";\n    }\n    if (amount_total) {\n        document.querySelector('.total_amount').innerHTML = amount_total;\n    }\n    if (!isNaN(amount_due)) {\n         document.querySelector('.amount_due').innerHTML = amount_due;\n    }\n}\n\n\n\nfunction getProjects(option) {\n    // Get the selected customer id\n    const selectedCustomerId = option.dataset.id;\n    // Send a GET request with the selected data-ids\n    fetch(`/invoices/create/projects/${selectedCustomerId}`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    })\n    .then(response => {\n        // Check if the response status is OK\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        // Parse the JSON response\n        return response.json();\n    })\n    .then(response => {\n        // Get the projects response\n        const projects = response;\n\n        // Get the project billing div\n        const projectBilling = document.querySelector('.project-billing');\n\n        // If the projects array isn't empty then remove the hidden class from the project billing div\n        // When selecting another option where the projects are empty then add the hidden class again\n        if (projects.length > 0) {\n            projectBilling.classList.remove('hidden');\n        } else {\n            projectBilling.classList.add('hidden');\n        }\n\n        const input = document.getElementById('project');\n        const datalist = document.getElementById('project-datalist');\n\n        // Get the project input field\n        const projectInput = document.getElementById('project');\n        const projectDataList = document.getElementById('project-datalist');\n        \n        // Clear existing options\n        projectInput.innerHTML = '';\n        projectDataList.innerHTML = '';\n\n        // Populate the datalist with the fetched projects\n        projects.forEach(project => {\n            const option = document.createElement('option');\n            option.value = project.name;\n            option.innerHTML = project.name;\n            option.setAttribute('data-id', project._id);\n            projectDataList.appendChild(option);\n        });\n        clickOptions(input, datalist);\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}","function deleteSelectedPaymentMethods() {\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.payment-method-checkbox:checked');\n\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch('/settings/payment-methods/delete-selected', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Payment methods deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}","function triggerInput() {\n    document.querySelector('#picture').click(); // Trigger the hidden input click event\n  }","function previewImage(event) {\n    const input = event.target;\n    const preview = document.querySelector('.previewImage');\n    const file = input.files[0];\n\n    if (file) {\n        const reader = new FileReader();\n\n        reader.onload = function (e) {\n            preview.src = e.target.result;\n        };\n\n        reader.readAsDataURL(file);\n    }\n}","function deleteSelectedProducts() {\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.product-checkbox:checked');\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch('/products/delete-selected', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Products deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}","function deleteSelectedProjects() {\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.project-checkbox:checked');\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch('/projects/delete-selected', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Projects deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}\n\n\n// Attach the createProject function to the form submission event\nconst projectForm = document.querySelector('form[action=\"/projects/create\"]');\nif (projectForm) {\n    projectForm.addEventListener('submit', (event) => {\n        event.preventDefault(); // Prevent the default form submission\n        createProject(); // Call the custom function to handle form submission\n    });\n}\n\n\nasync function createProject() {\n    const projectForm = document.querySelector('form[action=\"/projects/create\"]');\n\n    if (projectForm) {\n        const formData = new FormData(projectForm);\n        // Get the customer ID\n        const customer_id = document.querySelector('#customer_id-datalist .selected').dataset.id;\n        // Change the customer_id to the actual id instead of the name\n        formData.set('customer_id', customer_id);\n\n        // Fetch API POST request\n        try {\n            const response = await fetch('/projects/create', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams(formData).toString(),\n            });\n\n            if (response.ok) {\n                // Handle success, e.g., redirect to a new page\n                window.location.href = '/projects?success';\n            } else {\n                // Handle errors\n                console.error('Error:', response.statusText);\n            }\n        } catch (error) {\n            console.error('Error:', error.message);\n        }\n    }\n}\n\n// Execute editProject function when on that page\nconst editProjectOnPage = document.querySelector('.edit-project');\nif (editProjectOnPage) {\n    editProjectPage()\n}\n\nfunction editProjectPage() {\n    const customerInput = document.querySelector('#customer_id');\n    const customerValue = customerInput.value;\n    const customerOptions = document.querySelectorAll('#customer_id-datalist option');\n    // Add the selected class to the customer value\n    for (let i = 0; i < customerOptions.length; i++) {\n        const customerOptionValue = customerOptions[i].value;\n        if (customerOptionValue == customerValue) {\n            customerOptions[i].classList.add('selected');\n        }\n    }\n}\n\n\n// Attach the editProjectForm function to the form submission event\nconst editProjectForm = document.querySelector('.edit-projec-form');\nif (editProjectForm) {\n    editProjectForm.addEventListener('submit', (event) => {\n        event.preventDefault(); // Prevent the default form submission\n        editProject(); // Call the custom function to handle form submission\n    });\n}\n\nasync function editProject() {\n    if (editProjectForm) {\n        const formData = new FormData(editProjectForm);\n        // Get the customer ID\n        const customer_id = document.querySelector('#customer_id-datalist .selected').dataset.id;\n        // Change the customer_id to the actual id instead of the name\n        formData.set('customer_id', customer_id);\n\n        // Get URL to extract the id\n        const urlString = window.location.href;\n        const url = new URL(urlString);\n        const id = url.pathname.split('/').pop();\n        \n        // Fetch API POST request\n        try {\n            const response = await fetch(`/projects/edit/${id}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams(formData).toString(),\n            });\n\n            if (response.ok) {\n                // Handle success, e.g., redirect to a new page\n                window.location.href = `/projects/project/${id}?success`;\n            } else {\n                // Handle errors\n                console.error('Error:', response.statusText);\n            }\n        } catch (error) {\n            console.error('Error:', error.message);\n        }\n    }\n}\n\n// Show the success message\nconst projectOverview = document.querySelector('.project-overview');\nif (projectOverview) {\n    const urlString = window.location.href;\n    const url = new URL(urlString);\n    \n    // Check if the URL contains the query parameter \"?success\"\n    if (url.searchParams.has('success')) {\n        // Execute code if the query parameter is present\n        const success = document.querySelector('.alert-success');\n        success.classList.remove('hidden');\n    }\n}","document.addEventListener('DOMContentLoaded', function () {\n    const searchInput = document.getElementById('search');\n    const searchResults = document.querySelector('.searchResultsPopup');\n  \n    // Function to show the search results popup\n    const showSearchResults = async () => {\n      const searchTerm = searchInput.value;\n  \n      // Fetch the search results using AJAX\n      const response = await fetch(`/search?q=${encodeURIComponent(searchTerm)}`);\n      const html = await response.text();\n  \n      // Update the search results popup\n      searchResults.innerHTML = html;\n      searchResults.classList.remove('hidden');\n    };\n  \n    // Event listener for input changes\n    searchInput.addEventListener('input', function () {\n        showSearchResults();\n    });\n  \n    // Event listener for Escape key\n    document.addEventListener('keydown', function (event) {\n      if (event.key === 'Escape') {\n        searchResults.classList.add('hidden');\n      }\n    });\n  \n    // Event listener to hide the search results popup when clicking outside of it\n    document.addEventListener('click', function (event) {\n      if (!searchResults.contains(event.target) && event.target !== searchInput) {\n        searchResults.classList.add('hidden');\n      }\n    });\n  });\n  ","function deleteSelectedShippingCompanies() {\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.shipping-company-checkbox:checked');\n\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch('/settings/shipping-companies/delete-selected', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Shipping companies deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}","function deleteSelectedTaxes() {\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.tax-checkbox:checked');\n\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch('/settings/taxes/delete-selected', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Taxes deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}","// If we're on the project overview page\nif (projectOverview) {\n\n    // Select all elements with the class \"time-tracking-tr\"\n    const timeTrackingRows = document.querySelectorAll('.time-tracking-tr');\n    const totalTimePassedEl = document.querySelector('.total-time-passed');\n\n    // Loop through each timeTracking row\n    timeTrackingRows.forEach(row => {\n        // Check if the row does not have the class \"stop\"\n        const stopEl = row.querySelector('.stop-td .stop');\n        if (!stopEl) {\n            // Get relevant data attributes from the row\n            const timePassedEl = row.querySelector('.time-passed');\n\n            // Initialize timePassed if not present\n            var timePassed = unformatTime(timePassedEl.innerHTML) || 0;\n            var totalTimePassed = unformatTime(totalTimePassedEl.innerHTML) || 0;\n\n            // Update timePassed differently (e.g., with a timer)\n            const timeTrackTimer = setInterval(() => {\n                timePassed += 1;\n                totalTimePassed +=1;\n\n                // Update the timePassed element\n                timePassedEl.innerHTML = formatTime(timePassed);\n                totalTimePassedEl.innerHTML = formatTime(totalTimePassed);\n            }, 1000);\n        }\n    });\n\n}\n\n\nfunction formatTime(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const remainingSeconds = seconds % 60;\n\n    const formattedTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n    return formattedTime;\n}\n\nfunction unformatTime(formattedTime) {\n    // Split the formatted time into hours, minutes, and seconds\n    const [hours, minutes, seconds] = formattedTime.split(':').map(Number);\n\n    // Calculate the total time in seconds\n    const totalTimeInSeconds = hours * 3600 + minutes * 60 + seconds;\n\n    return totalTimeInSeconds;\n}\n\n\nfunction deleteSelectedTimeTrackings(project_id) {\n\n    // Select all checked checkboxes\n    const checkedCheckboxes = document.querySelectorAll('.time-tracking-checkbox:checked');\n    // Extract data-ids from checked checkboxes\n    const selectedIds = Array.from(checkedCheckboxes).map((checkbox) => {\n        return checkbox.dataset.id;\n    });\n\n    // Send a POST request with the selected data-ids\n    fetch(`/projects/time-tracking/delete-selected/${project_id}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ selectedIds }),\n    })\n    .then(response => response.json())\n    .then(data => {\n        // Check for success message or error message in the response\n        if (data.message === 'Time trackings deleted successfully') {\n            // Perform page refresh or other actions\n            location.reload(); // Reload the page\n        } else {\n            // Handle errors\n            console.error('Error:', data.message);\n        }\n    })\n    .catch(error => {\n        console.error('Error:', error);\n    });\n}","// Request to renew the token\nfunction renewToken() {\n    // Make a POST request to your server's /renew-token endpoint\n    // Include the refresh token stored in your cookies in the request\n    fetch('/auth/renew-token', {\n      method: 'POST',\n      credentials: 'include', // Include cookies in the request\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n        // Update the token cookie with the new token value\n      } else {\n        console.error('Token renewal failed:', data.message);\n      }\n    })\n    .catch(error => {\n      console.error('Token renewal error:', error);\n    });\n}\n\nconst loginPage = document.querySelector('.login-wrapper');\nif(!loginPage) {\n  setInterval(() => {\n    renewToken();\n  }, 1000 * access_token_expiry - (access_token_expiry / 10));\n  renewToken();\n}"]}